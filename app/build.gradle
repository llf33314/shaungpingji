apply plugin: 'com.android.application'
def keystorePSW = ''
def keystoreAlias = ''
def keystoreAliasPSW = ''
Properties properties = new Properties()
// local.properties file in the root director
properties.load(project.rootProject.file('local.properties').newDataInputStream())

keystorePSW = properties.getProperty("keystore.password")
keystoreAlias = properties.getProperty("keystore.alias")
keystoreAliasPSW = properties.getProperty("keystore.alias_password")
android {

    compileSdkVersion 25
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "com.gt.doubledisplay"
        minSdkVersion 19
        targetSdkVersion 22
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi-v7a"
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreAlias
            keyPassword keystoreAliasPSW
            storeFile file("double_screen_key.jks")
            storePassword keystorePSW
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug{
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                def flavorName = variant.flavorName.startsWith("_") ? variant.flavorName.substring(1) : variant.flavorName
                def apkFile = new File(
                        output.outputFile.getParent(),
                        "DoubleDisplayApp_${flavorName}_${variant.buildType.name}_v${variant.versionName}_${buildTime()}.apk")
                output.outputFile = apkFile
            }
        }
    }

}
def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'io.reactivex.rxjava2:rxjava:2.1.1'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.trello.rxlifecycle2:rxlifecycle-components:2.1.0'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    compile 'com.jakewharton:butterknife:8.7.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
    compile 'com.github.bumptech.glide:glide:4.0.0'
    compile 'com.android.support:support-v4:25.3.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.0.0'
    compile 'com.orhanobut:hawk:2.0.1'
    compile('io.socket:socket.io-client:0.8.3') {
        exclude group: 'org.json', module: 'json'
    }
    compile 'com.android.support:appcompat-v7:25.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:25.+'
    testCompile 'junit:junit:4.12'
    compile files('libs/gprintersdkv22.jar')
    compile files('libs/jcc-bate-0.7.3.jar')
    compile files('libs/commons-lang-2.6.jar')
    compile files('libs/json.jar')
    compile files('libs/ksoap2-android-assembly-2.5.2-jar-with-dependencies.jar')
    compile files('libs/xUtils-2.6.14.jar')
    compile files('libs/2247d5d9-01c9-37ee-a3f5-7266bb206419.jar')
    compile files('libs/c2912bb6-3eec-360d-8507-edf7840fa588.jar')
    compile files('libs/printsdk-v2.2.jar')
    compile files('libs/usbprintsdk-v2.1.jar')
    compile files('libs/electriscale.jar')
    compile files('libs/talk-4.0.9.jar')
    compile project(':CrosswalkWebview')
    compile files('libs/HdxUtil.jar')
}
